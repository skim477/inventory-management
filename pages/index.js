import Head from "next/head";
import { Form, Button, Container, Alert, ListGroup } from 'react-bootstrap';
import { useState } from 'react';
import { useAtom } from 'jotai';
import { productDataAtom, submittedDataAtom, errorAtom } from '@/lib/store';

export default function Home() {
  
  const [data, setData] = useAtom(productDataAtom);
  const [submittedData, setSubmittedData] = useAtom(submittedDataAtom);
  const [error, setError] = useAtom(errorAtom);

  const validationForm = () => {
    let errors = {};

    const fields = [
      { key: 'productName', label: 'Product Name' },
      { key: 'category', label: 'Category' },
      { key: 'qty', label: 'Quantity', isNumber: true },
      { key: 'price', label: 'Price', isNumber: true }
    ];
    
    fields.forEach(field => {
      if(!data[field.key]) {
        errors[field.key] = `${field.label} is required`;
      }
    });

    setError(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    try{
      if (validationForm()){
        setSubmittedData(currentData => [...currentData, data]);
        console.log(data);
      }      
    }catch(err){
      console.log(err);
    }

  };

  const handleChange = (e) => {
    setData({ ...data, [e.target.name]: e.target.value});
  };

  return (
    <>
      <Head>
        <title>Inventory Management System</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

        <Container  style={{width: '30%'}}>
          <Form onSubmit={handleSubmit} style={{ margin: 'auto', padding: '30px'}}>
            <Form.Group>
              <Form.Label>Product Name</Form.Label>
              <Form.Control type="text" name="productName" value={data.productName} onChange={handleChange} isInvalid={!!error.productName} />
              <Form.Control.Feedback type="invalid">
                {error.productName}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group>
              <Form.Label>Category</Form.Label>
              <Form.Control as="select" name="category" value={data.category} onChange={handleChange} isInvalid={!!error.category}>
                <option value="">Select Category</option>
                <option value="food">Food</option>
                <option value="electronics">Electronics</option>
                <option value="clothing">Clothing</option>
              </Form.Control>
              <Form.Control.Feedback type="invalid">
                {error.category}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group>
              <Form.Label>Quantity</Form.Label>
              <Form.Control type="number" name="qty" value={data.qty} onChange={handleChange} min="0" isInvalid={!!error.qty} />
              <Form.Control.Feedback type="invalid">
                {error.qty}
              </Form.Control.Feedback>
            </Form.Group>

            <Form.Group>
              <Form.Label>Price</Form.Label>
              <Form.Control type="number" name="price" value={data.price} onChange={handleChange} min="0" step="0.01" isInvalid={!!error.price} /> 
              <Form.Control.Feedback type="invalid">
                {error.price}
              </Form.Control.Feedback>
            </Form.Group>

            <Button type="submit">Submit</Button>
          </Form>

          {submittedData && submittedData.length > 0 && (
            <div>
              <ListGroup as="ul">
                {submittedData.map((product) => (
                  <ListGroup.Item as="li">
                    Product Name: {product.productName},
                    Category: {product.category},
                    Quantity: {product.qty},
                    Price: {product.price}
                  </ListGroup.Item>
                ))}
              </ListGroup>
            </div>
          )}
        </Container>


    </>
  );
}
